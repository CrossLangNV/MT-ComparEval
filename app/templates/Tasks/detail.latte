{block scripts}
{include #parent}
<script type="text/javascript" src="{$baseUri}/js/ngrams.js"></script>
<script type="text/javascript" src="{$baseUri}/js/bootstrap.min.js"></script>
<script type="text/javascript" src="{$baseUri}/js/highcharts.src.js"></script>
<script type="text/javascript">

angular.module( 'scroll', [] ).directive( 'whenScrolled', function() {
	return function(scope, elm, attr) {
		var raw = elm[0];

		$(window).bind('scroll', function() {
			var elementBottom = $(raw).offset().top + $(raw).height();
			var windowBottom = $(window).scrollTop() + $(window).height();	

			if( elementBottom <= windowBottom ) {
				scope.$apply( attr.whenScrolled );
			}
		});
	};
});

angular.module( 'scroll', [] ).directive( 'chart', function() {
	return {
		restrict: 'E',
		template: '<div></div>',
		transclude:true,
		replace: true,

		link: function (scope, element, attrs) {
			var chartsDefaults = {
				chart: {
					renderTo: element[0],
					type: attrs.type || null,
					height: attrs.height || null,
					width: attrs.width || null,
				}
			};

			//Update when charts data changes
			scope.$watch(function() { return attrs.value; }, function(value) {
				if(!attrs.value) return;
					// We need deep copy in order to NOT override original chart object.
					// This allows us to override chart data member and still the keep
					// our original renderTo will be the same
					var deepCopy = true;
					var newSettings = {};
					$.extend(deepCopy, newSettings, chartsDefaults, JSON.parse(attrs.value));
					var chart = new Highcharts.Chart(newSettings);
			});
		}
	}
});


function Sentences( $scope, $http ) {
	{foreach $taskIds as $i => $id}
	$scope.task{$i} = {$id};
	{/foreach}
	$scope.tasks = [];
	$scope.taskNames = {};
	$scope.metrics = [];

	$scope.sentences = [];
	$scope.offset = 0;
	$scope.currentMetric = 'bleu-cis';
	$scope.asc = true;
	$scope.isMatchingActive = false;
	$scope.isImprovingActive = false;
	$scope.isWorseningActive = false;
	$scope.showDiffWithReference = false;
	$scope.showDiffWithEachOther = false;
	$scope.showDiffFor = 0;
	$scope.showSource = true;
	$scope.showReference = true;
	$scope.showTask0 = true;
	$scope.showTask1 = true;
	$scope.loading = false;

	loadSentences();
	loadTasks();
	loadMetrics();

	$scope.$watch( 'currentMetric+asc+task0+task1', reloadSentences );
	$scope.$watch( 'currentMetric+task0+task1', loadCharts );

	function reloadSentences( oldValue, newValue ) {
		if( oldValue == newValue ) {
			return;
		}

		$scope.sentences = [];
		$scope.offset = 0;

		loadSentences();
	}

	$scope.sortSentencesAscending = function() {
		$scope.asc = true;
	}	

	$scope.sortSentencesDescending = function() {
		$scope.asc = false;
	}	

	$scope.loadMore = function() {
		loadSentences();
	}

	$scope.swapTasks = function() {
		var tmp = $scope.task0;
		$scope.task0 = $scope.task1;
		$scope.task1 = tmp;
	}

	function loadCharts() {
		var payload = {};
		payload.params = {
				"task1": $scope.task0,
				"task2": $scope.task1,
				"metric": ( $scope.currentMetric == '' ) ? 'bleu-cis' : $scope.currentMetric
		};

		$http.get( '{!$baseUri}/api/metrics/results', payload ).success( function( data ) {
			$scope.diffs = {
				"chart": {
					"zoomType": "x"
				},
				"title": {
					"text": $scope.currentMetric + " diffs",
				},
				"yAxis": {
					"title": {
						"text": "Scores"
					}
				},
				"legend": {
					"enabled": false
				},
				"tooltip": {
					"enabled": false
				},
				"credits": {
					"enabled": false
				},
				"plotOptions": {
					"series": {
						"marker": {
							"enabled": false,
						},
						"enableMouseTracking": false,
						"color": "#468847",
						"negativeColor": "#b94a48"
					}
				},

				"series": [ data.diffs ]
			};
		} );

		$http.get( '{!$baseUri}/api/metrics/samples', payload ).success( function( data ) {
			$scope.samples = {
				"chart": {
					"zoomType": "x"
				},
				"title": {
					"text": $scope.currentMetric + " pair bootstrap sampling",
				},
				"yAxis": {
					"title": {
						"text": "Scores"
					}
				},
				"legend": {
					"enabled": false
				},
				"tooltip": {
					"enabled": false
				},
				"credits": {
					"enabled": false
				},
				"plotOptions": {
					"series": {
						"marker": {
							"enabled": false,
						},
						"enableMouseTracking": false,
						"color": "#468847",
						"negativeColor": "#b94a48"
					}
				},

				"series": [ data.samples ]
			};
		} );
	}


	function loadMetrics() {
		$http.get( '{!$baseUri}/api/metrics' ).success( addMetrics );

	}

	function addMetrics( data ) {
		data.metrics.forEach( function( metric ) {
			$scope.metrics.push( metric );
		} );
	}


	function loadTasks() {
		$http.get( '{!$baseUri}/api/tasks', {
			params: {
				"experimentId": {$experimentId},
			}
		} ).success( addTasks );
	}

	function addTasks( data ) {
		data.tasks.forEach( function( task ) {
			$scope.taskNames[ task.id ] = task.name;
			$scope.tasks.push( task );
		} );
	}


	function loadSentences() {
		if ( $scope.loading == true ) {
			return;
		} else {
			$scope.loading = true;

			var payload = {};
			payload.params = {
					"taskIds[0]": $scope.task0,
					"offset": $scope.offset,
					"limit": 10,
					"orderBy": ( $scope.currentMetric == '' ) ? 'id' : $scope.currentMetric,
					"order": ( $scope.asc ) ? 'asc' : 'desc'
			};

			if( $scope.task1 != "" ) {
				payload.params[ "taskIds[1]" ] = $scope.task1;
			}

			$http.get( '{!$baseUri}/api/sentences', payload ).success( addSentences );
		}
	}

	function addSentences( data ) {
		data.sentences.forEach( function( sentence ) {
			if( sentence.translations.length == 2 && $scope.currentMetric != '' ) {
				metricA = sentence.translations[0].metrics[$scope.currentMetric];
				metricB = sentence.translations[1].metrics[$scope.currentMetric];

				sentence.diff = metricA - metricB;
			}

			sentence.reference_tokens = initClasses( tokenize( sentence.reference ) );
			sentence.translations.forEach( function( translation, translationNumber ) {
				translation.tokens = initClasses( tokenize( translation.text ) );

				var matchingPositions = getMatchingPositions( getNGrams( sentence.reference ), getNGrams( translation.text ) );
				for ( var i in matchingPositions.reference ) {
					if( matchingPositions.reference[i] == true ) {
						sentence.reference_tokens[i].class.push( 'matching-' + translationNumber );
					}
				}

				for ( var i in matchingPositions.translation ) {
					if( matchingPositions.translation[i] == true ) {
						translation.tokens[i].class.push( 'matching-' + translationNumber );
					}
				}

				var traceBack = computeTracebackMatrix(
					sentence.reference_tokens.map( function( t ) { return t.token } ),
					translation.tokens.map( function( t ) { return t.token } ),
					function( a, b ) { return ( a == b ) ? 1 : -10; }, -1
				);


				var i = sentence.reference_tokens.length;
				var j = translation.tokens.length;
				while( i != 0 || j != 0 ) {
					switch( traceBack[j][i] ) {
						case 'M':
							i--;
							j--;
							sentence.reference_tokens[i].class.push( 'diff-matching-' + translationNumber );
							translation.tokens[j].class.push( 'diff-matching-' + translationNumber );
							break;
						case 'D':
							j--;
							translation.tokens[j].class.push( 'diff-del-' + translationNumber );
							break;
						case 'I':
							i--;
							sentence.reference_tokens[i].class.push( 'diff-ins-' + translationNumber );
							break;
					}
				}

			} );

			if( sentence.translations.length == 2 ) {
				var traceBack = computeTracebackMatrix(
					sentence.translations[0].tokens.map( function( t ) { return t.token } ),
					sentence.translations[1].tokens.map( function( t ) { return t.token } ),
					function( a, b ) { return ( a == b ) ? 1 : -10; }, -1
				);

				var i = sentence.translations[0].tokens.length;
				var j = sentence.translations[1].tokens.length;
				while( i != 0 || j != 0 ) {
					switch( traceBack[j][i] ) {
						case 'M':
							i--;
							j--;
							sentence.translations[0].tokens[i].class.push( 'diff-matching-both' );
							sentence.translations[1].tokens[j].class.push( 'diff-matching-both' );
							break;
						case 'D':
							j--;
							sentence.translations[1].tokens[j].class.push( 'diff-del-both' );
							break;
						case 'I':
							i--;
							sentence.translations[0].tokens[i].class.push( 'diff-ins-both' );
							break;
					}
				}
			}


			var translationNGrams = sentence.translations.map( function( translation ) { return getNGrams( translation.text ); } );
			var improving = getImproving(
				getNGrams( sentence.reference ),
				translationNGrams
			);

			var worsening = getWorsening(
				getNGrams( sentence.reference ),
				translationNGrams
			);

			if( sentence.translations.length > 1 ) {
				sentence.translations.forEach( function( translation, translationNumber ) {
					improving[ translationNumber ].forEach( function( isImproving, token ) {
						if( isImproving ) {
							translation.tokens[ token ].class.push( 'improving' );
						}
					} );

					worsening[ translationNumber ].forEach( function( isWorsening, token ) {
						if( isWorsening ) {
							translation.tokens[ token ].class.push( 'worsening' );
						}
					} );
				} );
			}

			$scope.sentences.push( sentence );
			$scope.offset++;
		} );

		$scope.loading = false;
	}

	$scope.predicate = function( sentence ) {
		if( $scope.currentMetric == '' ) {
			return parseInt( sentence.sentence_id );
		} else if( sentence.translations.length == 1 ) {
			return parseFloat( sentence.translations[0].metrics[$scope.currentMetric] );
		} else {
			var metricA = parseFloat( sentence.translations[0].metrics[$scope.currentMetric] ); 
			var metricB = parseFloat( sentence.translations[1].metrics[$scope.currentMetric] ); 

			return metricA - metricB;
		}
	}
};

</script>
{/block}

{block #content}
<style>
.hidden {
	display: none;
}

span {
	padding: 0em 0.1em;
}

.matching-active .matching-0 {
	background-color: #fcf8e3;
	color: #c09853;
}

.matching-active .matching-1 {
	background-color: #d9edf7;
	color: #3a87ad;
}

.matching-active .matching-0.matching-1 {
	color: #468847;
	background-color: #dff0d8;
}

.improving-active .matching-0.improving {
	background-color: #c09853;
	color: #fcf8e3;
}

.improving-active .matching-1.improving {
	background-color: #3a87ad;
	color: #d9edf7;
}

.worsening-active .worsening {
	background-color: #f2dede;
	color: #b94a48;
}

.diff-active-1 .diff-ins-1, .diff-active-0 .diff-ins-0 {
	border-bottom: 3px solid #c09853; 
}

.diff-active-1 .diff-matching-1, .diff-active-0 .diff-matching-0 {
	border-bottom: 3px solid #468847;
}

.diff-active-1 .diff-del-1, .diff-active-0 .diff-del-0 {
	border-bottom: 3px solid #b94a48;
}

.diff-active-both .worsening.diff-ins-both, .diff-active-both .worsening.diff-del-both {
	border-bottom: 3px solid #b94a48;
}

.diff-active-both .improving.diff-ins-both, .diff-active-both .improving.diff-del-both {
	border-bottom: 3px solid #468847;
}

.active-metric {
	color: #468847;
}

</style>
<div
	ng-app="scroll"
	ng-controller="Sentences"
	when-scrolled="loadMore()"
	ng-class="{
		'matching-active': isMatchingActive,
		'improving-active': isImprovingActive,
		'worsening-active': isWorseningActive,
		'diff-active-0': showDiffWithReference && showDiffFor == 0,
		'diff-active-1': showDiffWithReference && showDiffFor == 1,
		'diff-active-both': showDiffWithEachOther
	}"
>
	<div class="navbar">
		<div class="navbar-inner">
			<ul class="nav pull-left">
				<li>
					<form class="navbar-form">
						<select ng-model="task0" ng-required ng-options="task.id as task.name for task in tasks | filter: { 'id': '!'+task1 }">
						</select>

						<a ng-click="swapTasks()" class="btn"><i class="icon-refresh"> </i></a>

						<select ng-model="task1" ng-options="task.id as task.name for task in tasks | filter: { 'id': '!'+task0 }">
						</select>
					</form>
				</li>
			</ul>
			<ul class="nav pull-right">
				<li>
					<form class="navbar-form form-inline">
						<select ng-model="currentMetric" id="metrics" ng-options="metric for metric in metrics">
							<option value="">Sort sentences by id</option>
						</select>
						<div class="btn-group">
							<a ng-click="sortSentencesAscending()" class="btn" ng-class="{'btn-success': asc}" id="sort-asc"><i class="icon-arrow-up"> </i></a>
							<a ng-click="sortSentencesDescending()" class="btn" ng-class="{'btn-success': !asc}" id="sort-desc"><i class="icon-arrow-down"> </i></a>
						</div>
					</form>
				</li>
			</ul>
		</div>
	</div>

	<div class="row">
		<div class="span6">
			<chart value="{{ diffs }}" type="area"></chart>
		</div>
		<div class="span6">
			<chart value="{{ samples }}" type="line"></chart>
		</div>
	</div>

	<h3>Matching ngrams options</h3>
	<form class="form-horizontal">
		<div class="control-group">
			<label class="checkbox">
				<input type="checkbox" ng-model="isMatchingActive" />
				Highlight matching ngrams
			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="isImprovingActive" />
				Highlight improving ngrams
			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="isWorseningActive" />
				Highlight worsening ngrams
			</label>
		</div>
	</form>

	<h3>Diff options</h3>
	<form class="form-horizontal">
		<div class="control-group">
			<label class="checkbox">
				<input type="checkbox" ng-model="showDiffWithReference" />
				Show diff with reference
			</label>

			<label class="radio">
				<input ng-model="showDiffFor" value="0" type="radio" name="show-diff-for" />
				Show diff for {{ taskNames[ task0 ] }}
			</label>
			<label class="radio">
				<input ng-model="showDiffFor" value="1" type="radio" name="show-diff-for" />
				Show diff for {{ taskNames[ task1 ] }}
			</label>

			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="showDiffWithEachOther" />
				Show diff with each other
			</label>
		</div>
	</form>

	<form class="form-horizontal">
		<div class="control-group">
			<label class="checkbox">
				<input type="checkbox" ng-model="showSource" />
				Show source
			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="showReference" />
				Show reference
			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="showTask0" />
				Show {{ taskNames[ task0 ] }}
			</label>

			<label class="checkbox">
				<input type="checkbox" ng-model="showTask1" />
				Show {{ taskNames[ task1 ] }}
			</label>
		</div>
	</form>

	<ul class="unstyled">
		<li
			ng-repeat="sentence in sentences | orderBy:predicate:!asc"
			class="sentence"
			data-id="{{ sentence.sentence_id }}"
		>

			<dl class="dl-horizontal">
				<div ng-class="{ 'hidden': !showSource }">
					<dt>Source</dt>
					<dd class="source">{{ sentence.source }}</dd>
				</div>

				<div ng-class="{ 'hidden': !showReference }">
					<dt>Reference</dt>
					<dd class="reference">
						<span ng-repeat="token in sentence.reference_tokens" class="{{ token.class.join( ' ' ) }}"> {{ token.token }} </span>
					</dd>
				</div>

				<div
					ng-repeat="translation in sentence.translations| orderBy:'+task_id':(task0>task1)"
					class="translation"
					ng-class="{'hidden': ( translation.task_id == task0 && !showTask0 ) || ( translation.task_id == task1 && !showTask1 ) }"
				>
					<dt>{{ taskNames[ translation.task_id ] }}</dt>
					<dd class="text">
						<span ng-repeat="token in translation.tokens" class="{{ token.class.join( ' ' ) }}"> {{ token.token }} </span>
					</dd>
					<ul>
						<li
							ng-repeat="(metric, score) in translation.metrics"
							ng-class="{'active-metric': metric == currentMetric}"
						>
							<dt>{{ metric }}</dd>
							<dd class="metric">{{ score }}</dd>
						</li>
					</ul>
				</div>

				<div ng-class="{ 'hidden': currentMetric == '' || sentence.diff == null }">
					<dt>Diff {{ currentMetric }}</dt>
					<dd>{{ sentence.diff }}</dd>
				</div>
			</dl>
		</li>
	</ul>

	<div ng-class="{ 'hidden': !loading }">Loading...</div>
</div>
{/block}
